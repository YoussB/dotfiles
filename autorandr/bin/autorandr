#!/bin/sh
#
# A stripped-down version of 'autorandr' with more flexible switching.
#
# Original autorandr by: Stefan Tomanek <stefan.tomanek@wertarbyte.de>

XRANDR=/usr/bin/xrandr
XDPYINFO=/usr/bin/xdpyinfo
PROFILES=~/.autorandr/
CONFIG=~/.autorandr.conf

CHANGE_PROFILE=0
DEFAULT_PROFILE=""

SCRIPTNAME="$(basename $0)"

if [ -f $CONFIG ]; then
  echo "Loading configuration from '$CONFIG'" >&2
  . $CONFIG
fi

setup_fp_xrandr_edid() {
  $XRANDR -q --verbose | awk '
  /^[^ ]+ (dis)?connected / { DEV=$1; }
  $1 ~ /^[a-f0-9]+$/ { ID[DEV] = ID[DEV] $1 }
  END { for (X in ID) { print X " " ID[X]; } }'
}

setup_fp_sysfs_edid() {
  # xrandr triggers the reloading of EDID data
  $XRANDR -q > /dev/null
  # hash the EDIDs of all _connected_ devices
  for P in /sys/class/drm/card*-*/; do
    # nothing found
    [ ! -d "$P" ] && continue
    if grep -q "^connected$" < "${P}status"; then
      echo -n "$(basename "$P") "
      md5sum ${P}edid | awk '{print $1}'
    fi
  done
}

setup_fp() {
  local FP="";
  for M in setup_fp_xrandr_edid setup_fp_sysfs_edid; do
    FP="$($M)"
    if [ -n "$FP" ]; then
      break
    fi
  done
  if [ -z "$FP" ]; then
    echo "Unable to fingerprint display configuration" >&2
    return
  fi
  echo "$FP"
}

blocked() {
  local PROFILE="$1"
  [ ! -x "$PROFILES/$PROFILE/block" ] && return 1

  "$PROFILES/$PROFILE/block" "$PROFILE"
}

load() {
  local PROFILE="$1"
  echo " -> loading profile $PROFILE"
  "$PROFILES/$PROFILE/switch" "$PROFILE"
}

help() {
  cat <<EOH
Usage: $SCRIPTNAME [options]

-h, --help 		get this small help
-c, --change 		switch to the detected profile
-l, --load <profile> 	load profile <profile>
-d, --default <profile> if no profile detected, default to <profile>
--fingerprint		fingerprint your current hardware setup

 To prevent a profile from being loaded, place a script call "block" in its
 directory. The script is evaluated before the screen setup is inspected, and
 in case of it returning a value of 0 the profile is skipped. This can be used
 to query the status of a docking station you are about to leave.

 If no suitable profile can be identified, the current configuration is kept.
 To change this behaviour and switch to a fallback configuration, specify
 --default <profile>.

 Each profile must provide a script called "switch", which should e.g. invoke
 xrandr and set up any other preferences such as loading Xresources to
 configure the DPI.

EOH
  exit
}

# process parameters
OPTS=$(getopt -n autorandr -o s:l:d:cfh --long change,default:,load:,fingerprint,config,help -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTS"

while true; do
  case "$1" in
    -c|--change) CHANGE_PROFILE=1; shift ;;
    -d|--default) DEFAULT_PROFILE="$2"; shift 2 ;;
    -l|--load) LOAD_PROFILE="$2"; shift 2 ;;
    -h|--help) help ;;
    --fingerprint) setup_fp; exit 0;;
    --) shift; break ;;
    *) echo "Error: $1"; exit 1;;
  esac
done

CURRENT_SETUP="$(setup_fp)"

if [ -n "$LOAD_PROFILE" ]; then
  CHANGE_PROFILE=1 load "$LOAD_PROFILE"
  exit $?
fi

for SETUP_FILE in $PROFILES/*/setup; do
  if ! [ -e $SETUP_FILE ]; then
    break
  fi
  PROFILE="$(basename $(dirname "$SETUP_FILE"))"
  echo -n "$PROFILE"

  if blocked "$PROFILE"; then
    echo " (blocked)"
    continue
  fi

  FILE_SETUP="$(cat "$PROFILES/$PROFILE/setup")"
  if [ "$CURRENT_SETUP" = "$FILE_SETUP" ]; then
    echo " (detected)"
    if [ "$CHANGE_PROFILE" -eq 1 ]; then
      load "$PROFILE"
    fi
    # found the profile, exit with success
    exit 0
  else
    echo ""
  fi
done

# we did not find the profile, load default
if [ -n "$DEFAULT_PROFILE" ]; then
  echo "No suitable profile detected, falling back to $DEFAULT_PROFILE"
  load "$DEFAULT_PROFILE"
fi

exit 1
