colorscheme gruvbox

# indent using 2 spaces by default
set global tabstop 2
set global indentwidth 2

# <tab> expands to spaces instead
hook global InsertChar \t %{
  exec -draft -itersel h@
}

# show contextual lines,columns when panning around
set global scrolloff 3,5

# map jk and kj to <esc>
hook global InsertChar k %{ try %{ exec -draft hH <a-k>jk<ret> d; exec <esc> }}
hook global InsertChar j %{ try %{ exec -draft hH <a-k>kj<ret> d; exec <esc> }}

# commenting
map global normal '#' :comment-line<ret>

# save on enter
map global normal <ret> :w<ret>
# ...except in grep result panes
hook global WinSetOption filetype=grep %{
  unmap global normal <ret> :w<ret>
}

# ag instead of grep
set global grepcmd 'ag --follow --column'

# x11 clipboard interop
map global user y '<a-|>xsel --input --clipboard<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>' \
  -docstring "clipboard: copy"
map global user P '!xsel --output --clipboard<ret>' \
  -docstring "clipboard: paste before"
map global user p '<a-!>xsel --output --clipboard<ret>' \
  -docstring "clipboard: paste after"

# use <tab> to cycle through complete suggestions
hook global InsertCompletionShow .* %{   map window insert <tab> <c-n>;   map window insert <backtab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <backtab> <c-p> }

# linting
map global user n ':lint-next-error<ret>' \
	-docstring "lint: next error"
map global user N ':lint-previous-error<ret>' \
	-docstring "lint: previous error"

# go
hook global WinSetOption filetype=go %{
  # autocomplete by default
  go-enable-autocomplete

  # auto-lint by building
  lint-enable
  set window lintcmd 'go-kakoune-lint'
  hook buffer BufWritePost .+\.go %{ lint }

  # auto-format on save
  hook buffer BufWritePre .+\.go %{ go-format -use-goimports }

  # indent using tabs
  set global indentwidth 0

  # goto-definition
  map global goto d '<esc>:go-jump<ret>' \
    -docstring "jump to definition"
}

# elm
hook global WinSetOption filetype=elm %{
  # auto-format on save
  set window formatcmd 'elm-format --stdin'
  hook buffer BufWritePre .+\.elm %{ format }
}

# auto-mkdir parent dirs when saving a file
hook global BufWritePre .* %{ nop %sh{ dir=$(dirname $kak_buffile)
  [ -d $dir ] || mkdir --parents $dir
}}

# highlight search matches
face search +r

hook global NormalKey [/?*nN]|<a-[/?*nN]> %{ try %{
  add-highlighter dynregex '%reg{/}' 0:search
}}

hook global NormalKey <esc> %{ try %{
  remove-highlighter dynregex_%reg{<slash>}
}}
