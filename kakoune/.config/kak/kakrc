colorscheme zenburn

# indent using 2 spaces by default
set global tabstop 2
set global indentwidth 2

# show contextual lines,columns when panning around
set global scrolloff 3,5

# map jk and kj to <esc>
hook global InsertChar k %{ try %{ exec -draft hH <a-k>jk<ret> d; exec <esc> }}
hook global InsertChar j %{ try %{ exec -draft hH <a-k>kj<ret> d; exec <esc> }}

# commenting
map global normal '#' :comment-line<ret>

# save on enter
map global normal <ret> :w<ret>

# ag instead of grep
set global grepcmd 'ag --follow --column'

# x11 clipboard interop
map global user y '<a-|>xsel --input --clipboard<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>' \
  -docstring "clipboard: copy"
map global user P '!xsel --output --clipboard<ret>' \
  -docstring "clipboard: paste before"
map global user p '<a-!>xsel --output --clipboard<ret>' \
  -docstring "clipboard: paste after"

# use <tab> to cycle through complete suggestions
hook global InsertCompletionShow .* %{   map window insert <tab> <c-n>;   map window insert <backtab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <backtab> <c-p> }

# linting
map global user n ':lint-next-error<ret>' \
	-docstring "lint: next error"
map global user N ':lint-previous-error<ret>' \
	-docstring "lint: previous error"

# go
hook global WinSetOption filetype=go %{
  # autocomplete by default
  go-enable-autocomplete

  # auto-lint by building
  lint-enable
  set window lintcmd 'go-kakoune-lint'
  hook buffer BufWritePost .+\.go %{ lint }

  # auto-format on save
  hook buffer BufWritePre .+\.go %{ go-format -use-goimports }

  # indent using tabs
  set global indentwidth 0
}

# elm
hook global WinSetOption filetype=elm %{
  # auto-format on save
  set window formatcmd 'elm-format --stdin'
  hook buffer BufWritePre .+\.elm %{ format }
}

# fix iterm + fish until https://github.com/mawww/kakoune/pull/1632 is merged
def -allow-override -hidden -params 1.. iterm-new-split-impl %{
    %sh{
        direction="$1"
        shift
        if [ $# -gt 0 ]; then kakoune_params="-e '$@'"; fi
        sh_cmd="kak -c ${kak_session} ${kakoune_params}"
        osascript                                                     \
        -e "tell application \"iTerm\""                               \
        -e "    tell current session of current window"               \
        -e "        tell (split ${direction} with same profile)"      \
        -e "            select"                                       \
        -e "            write text \"export TMPDIR='${TMPDIR}'\""     \
        -e "            write text \"exec ${sh_cmd}\""                \
        -e "        end tell"                                         \
        -e "    end tell"                                             \
        -e "end tell"
    }
}

def -allow-override -params .. -command-completion \
    -docstring %{iterm-new-tab [<arguments>]: create a new tab
All optional arguments are forwarded to the new kak client} \
    iterm-new-tab %{
    %sh{
        if [ $# -gt 0 ]; then kakoune_params="-e '$@'"; fi
        sh_cmd="kak -c ${kak_session} ${kakoune_params}"
        osascript                                                              \
        -e "tell application \"iTerm\""                                        \
        -e "    tell current window"                                           \
        -e "        tell current session of (create tab with default profile)" \
        -e "            write text \"export TMPDIR='${TMPDIR}'\""              \
        -e "            write text \"exec ${sh_cmd}\""                         \
        -e "        end tell"                                                  \
        -e "    end tell"                                                      \
        -e "end tell"
    }
}

def -allow-override -params .. -command-completion \
    -docstring %{iterm-new-window [<arguments>]: create a new window
All optional arguments are forwarded to the new kak client} \
    iterm-new-window %{
    %sh{
        if [ $# -gt 0 ]; then kakoune_params="-e '$@'"; fi
        sh_cmd="kak -c ${kak_session} ${kakoune_params}"
        osascript                                                 \
        -e "tell application \"iTerm\""                           \
        -e "    set w to (create window with default profile)"    \
        -e "    tell current session of w"                        \
        -e "        write text \"export TMPDIR='${TMPDIR}'\""     \
        -e "        write text \"exec ${sh_cmd}\""                \
        -e "    end tell"                                         \
        -e "end tell"
    }
}
